
import React, { useEffect, useState } from 'react';
import { Link, useNavigate, NavLink } from 'react-router-dom';
import Navbar from "../Navbar";
import Sidebar from "../Sidebar";
import { FaTachometerAlt, FaPrint } from 'react-icons/fa';
import LoadingScreen from "../../Loading";
import axios from "axios";
import RiderImagesView from "./RiderImagesView"
import { utils, writeFile } from 'xlsx';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { Device } from '@capacitor/device'; // Import Capacitor Device plugin

const RiderList = () => {
    const link = "https://pos.inspiredgrow.in/vps"

    const [loading, setLoading] = useState(false);
    const [actionMenu, setActionMenu] = useState(null);
    const [isSidebarOpen, setSidebarOpen] = useState(true);
    const [status, setStatus] = useState([]);
    const [users, setUsers] = useState([]);
    const [currentPage, setCurrentPage] = useState(1);
    const [itemsPerPage, setItemsPerPage] = useState(10);
    const [permissions, setPermissions] = useState([]);
    const navigate = useNavigate();
    const [searchTerm, setSearchTerm] = useState('');
    const [data, setData] = useState([])
    const [view, setView] = useState(false)

    // --- Bluetooth Printer State ---
    const [platform, setPlatform] = useState('web');
    const [btError, setBtError] = useState('');
    const [isBtLoading, setIsBtLoading] = useState(false);
    const [connectedDevice, setConnectedDevice] = useState(null);

    // --- Initial Setup Effect ---
    useEffect(() => {
        // Fetch user data
        fetchusers();
        
        // Check platform and auto-connect printer on Android
        const initializeBluetooth = async () => {
            try {
                const info = await Device.getInfo();
                setPlatform(info.platform);
                if (info.platform === 'android') {
                    autoConnectToPrinter();
                }
            } catch (e) {
                console.error("Error getting device info", e);
                setBtError("Could not determine the platform.");
            }
        };

        initializeBluetooth();

        // Sidebar setup
        if (window.innerWidth < 768) setSidebarOpen(false);
    }, []);

    // --- Bluetooth Functions ---

    const autoConnectToPrinter = () => {
        if (typeof window.bluetoothSerial === 'undefined') {
            setBtError('Bluetooth plugin not found. Run on a real device.');
            return;
        }
        setIsBtLoading(true);
        const savedPrinterAddress = localStorage.getItem('printerAddress');

        if (savedPrinterAddress) {
            connectToDevice({ address: savedPrinterAddress, name: 'Saved Printer' }, true);
        } else {
            window.bluetoothSerial.list(
                (foundDevices) => {
                    const thermalPrinter = foundDevices.find(dev =>
                        dev.name.toLowerCase().includes('printer') ||
                        dev.name.toLowerCase().includes('mpt') ||
                        dev.name.toLowerCase().includes('pos')
                    ) || foundDevices[0];
                    if (thermalPrinter) {
                        connectToDevice(thermalPrinter);
                    } else {
                        setBtError('No auto-connect printer found. Connect manually.');
                        setIsBtLoading(false);
                    }
                },
                (failure) => {
                    setBtError(`Error listing devices: ${failure}`);
                    setIsBtLoading(false);
                }
            );
        }
    };

    const connectToDevice = (device, isAutoConnect = false) => {
        setIsBtLoading(true);
        setBtError('');
        window.bluetoothSerial.connect(
            device.address,
            () => {
                setConnectedDevice(device);
                localStorage.setItem('printerAddress', device.address);
                setIsBtLoading(false);
            },
            (failure) => {
                localStorage.removeItem('printerAddress');
                if (!isAutoConnect) {
                    setBtError(`Failed to connect to ${device.name}: ${failure}`);
                }
                setIsBtLoading(false);
            }
        );
    };

    const printRiderDetails = (rider) => {
        if (!connectedDevice) {
            alert('No printer connected. Please connect a printer first.');
            return;
        }

        const dataToPrint = `
        *** RIDER DETAILS ***\n
------------------------------------------\n
Name: ${rider.firstname} ${rider.lastname}\n
Username: ${rider.username}\n
Mobile: ${rider.mobile}\n
Email: ${rider.email}\n
Store: ${Array.isArray(rider.store) ? rider.store.map(s => s.StoreName).join(", ") : rider.store?.StoreName ?? "N/A"}\n
Status: ${status.includes(rider._id) ? 'Inactive' : 'Active'}\n
------------------------------------------\n
\n\n
        `;

        window.bluetoothSerial.write(
            dataToPrint,
            () => alert(`Printing details for ${rider.firstname}...`),
            (failure) => setBtError(`Failed to print: ${failure}`)
        );
    };

    // --- Data Fetching and Handling ---

    const fetchusers = async () => {
        setLoading(true);
        const token = localStorage.getItem("token");
        if (!token) {
            navigate("/");
            return;
        }
        try {
            const response = await fetch(`${link}/api/rider/all`, {
                headers: { Authorization: `Bearer ${token}` },
            });
            const payload = await response.json();
            const all = Array.isArray(payload) ? payload : (Array.isArray(payload.data) ? payload.data : []);
            setUsers(all);
        } catch (err) {
            console.error("Error fetching users:", err);
        } finally {
            setLoading(false);
        }
    };

    const deleteUser = async (id) => {
        if (!window.confirm("Delete this user?")) return;
        setLoading(true);
        try {
            await axios.delete(`${link}/api/rider/${id}`, {
                headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
            });
            fetchusers();
        } catch (err) {
            console.error(err);
        } finally {
            setLoading(false);
        }
    };

    // --- Filtering and Pagination ---
    const filtered = users.filter(u => {
        if (!searchTerm) return true;
        const term = searchTerm.toLowerCase();
        return (
            u.username.toLowerCase().includes(term) ||
            u.email.toLowerCase().includes(term)
        );
    });
    const totalPages = Math.ceil(filtered.length / itemsPerPage);
    const start = (currentPage - 1) * itemsPerPage;
    const current = filtered.slice(start, start + itemsPerPage);

    // --- Export Functions ---
    const exportToExcel = () => { /* ... existing code ... */ };
    const exportToPDF = () => { /* ... existing code ... */ };
    const exportToCSV = () => { /* ... existing code ... */ };
    const copyToClipboard = () => { /* ... existing code ... */ };

    if (loading) return <LoadingScreen />;

    return (
        <div className="flex flex-col ">
            <Navbar isSidebarOpen={isSidebarOpen} setSidebarOpen={setSidebarOpen} />
            <div className="box-border flex min-h-screen">
                <div className='w-auto'>
                    <Sidebar isSidebarOpen={isSidebarOpen} />
                </div>
                <div className="flex flex-col w-full p-2 mx-auto overflow-x-auto transition-all duration-300">
                    <header className="flex flex-col items-center justify-start px-2 py-2 mb-2 bg-gray-100 rounded-md shadow md:justify-between md:flex-row">
                        <div className="flex items-baseline gap-2 sm:text-left">
                            <h1 className="text-lg font-semibold">Rider List</h1>
                        </div>
                        {/* --- Printer Status UI --- */}
                        {platform === 'android' && (
                             <div className="p-2 bg-gray-200 rounded-md">
                                <p className="text-sm font-semibold">Printer Status:
                                    {isBtLoading && !connectedDevice && <span className="text-blue-600"> Connecting...</span>}
                                    {connectedDevice ? <span className="text-green-600"> Connected</span> : !isBtLoading && <span className="text-red-600"> Disconnected</span>}
                                </p>
                                {btError && <p className="text-xs text-red-500">{btError}</p>}
                            </div>
                        )}
                    </header>
                    
                    {view && <RiderImagesView setView={setView} data={data} />}

                    <div className="p-4 bg-white border rounded-lg shadow-md">
                        <header className="flex items-center justify-between mb-4">
                            <div>Riders List</div>
                            <Link to='/rider/add'>
                                <button className="px-4 py-2 text-white rounded bg-cyan-500">+ New Rider</button>
                            </Link>
                        </header>

                        {/* controls */}
                        <div className="flex flex-col justify-between mb-2 space-y-1 md:flex-row md:space-y-0 md:items-center">
                            {/* ... show entries ... */}
                            <div className="flex justify-end flex-1 gap-1 mt-2 mb-2 ">
                                <button onClick={copyToClipboard} className="w-full px-3 py-2 text-sm text-white bg-cyan-500 lg:w-auto">Copy</button>
                                <button onClick={exportToExcel} className="w-full px-3 py-2 text-sm text-white bg-cyan-500 lg:w-auto">Excel</button>
                                <button onClick={exportToPDF} className="w-full px-3 py-2 text-sm text-white bg-cyan-500 lg:w-auto">PDF</button>
                                {platform === 'android' && (
                                    <button onClick={autoConnectToPrinter} className="w-full px-3 py-2 text-sm text-white bg-blue-600 lg:w-auto">Reconnect Printer</button>
                                )}
                                <input type="text" placeholder="Search" className="w-full p-2 text-sm border border-gray-300 md:w-auto" onChange={(e) => setSearchTerm(e.target.value)} />
                            </div>
                        </div>

                        <div className="overflow-x-auto">
                            <table className="w-full border border-collapse">
                                <thead className="bg-gray-200">
                                    <tr>
                                        {["#", "Store Name", " UserName", "Name", "Mobile", "Email", "Role", "Created On", "Images", "Status", "Action"]
                                            .map(h => <th key={h} className="p-1 border">{h}</th>)}
                                    </tr>
                                </thead>
                                <tbody>
                                    {current.length === 0
                                        ? <tr><td colSpan="11" className="p-2 text-center">No data Available</td></tr>
                                        : current.map((u, i) => (
                                            <tr key={u._id} className="text-sm">
                                                {/* ... other tds ... */}
                                                <td className="p-1 border">{start + i + 1}</td>
                                                <td className="p-1 border">{Array.isArray(u.store) ? u.store.map(s => s.StoreName).join(", ") : u.store?.StoreName ?? "N/A"}</td>
                                                <td className="p-1 border">{u.username}</td>
                                                <td className="p-1 border">{u.firstname} {u.lastname}</td>
                                                <td className="p-1 border">{u.mobile}</td>
                                                <td className="p-1 border">{u.email}</td>
                                                <td className="p-1 border">{u.role?.roleName}</td>
                                                <td className="p-1 border">{new Date(u.createdAt).toDateString()}</td>
                                                <td className="p-1 border"><button className='px-3 bg-gray-300 rounded-2xl' onClick={() => { setView(true); setData({ ProfileImage: u.profileImage, AddharCardImage: u.addharCardImage, PanCardImage: u.panCardImage, DrivingLicenseImage: u.drivingLicenseImage }) }}>View</button></td>
                                                <td className="p-1 text-center transition duration-300 ease-in-out border cursor-pointer hover:bg-gray-100" onClick={() => setStatus(st => st.includes(u._id) ? st.filter(x => x !== u._id) : [...st, u._id])}>
                                                    {status.includes(u._id) ? <span className="inline-block px-3 py-1 text-sm font-medium text-white transition duration-300 bg-red-600 rounded-full">Inactive</span> : <span className="inline-block px-3 py-1 text-sm font-medium text-white transition duration-300 bg-green-500 rounded-full">Active</span>}
                                                </td>
                                                <td className="relative p-1 border">
                                                    <button className="px-3 py-1 text-white transition duration-300 rounded-full bg-cyan-600 hover:bg-cyan-700" onClick={() => setActionMenu(am => am === u._id ? null : u._id)}>Action ⏷</button>
                                                    {actionMenu === u._id && (
                                                        <div className="absolute right-0 z-10 w-32 mt-2 bg-white border rounded-md shadow-lg animate-fade-in">
                                                            <button className="w-full px-3 py-2 text-sm text-left text-green-600 transition hover:bg-gray-100" onClick={() => navigate(`/rider/add?id=${u._id}`)}>✏️ Edit</button>
                                                            {/* --- DYNAMIC PRINT BUTTON --- */}
                                                            {platform === 'android' && (
                                                                <button className="flex items-center w-full px-3 py-2 text-sm text-left text-blue-600 transition hover:bg-gray-100" onClick={() => printRiderDetails(u)}><FaPrint className="mr-2"/> Print</button>
                                                            )}
                                                            <button className="w-full px-3 py-2 text-sm text-left text-red-600 transition hover:bg-gray-100" onClick={() => deleteUser(u._id)}>🗑️ Delete</button>
                                                        </div>
                                                    )}
                                                </td>
                                            </tr>
                                        ))
                                    }
                                </tbody>
                            </table>
                        </div>
                        {/* pagination */}
                        <div className="flex flex-col items-center gap-2 p-2 md:flex-row md:justify-between">
                            <span>Showing {start + 1} to {Math.min(start + itemsPerPage, filtered.length)} of {filtered.length} entries</span>
                            <div className="flex gap-2">
                                <button className={`px-3 py-1 rounded ${currentPage === 1 ? "bg-gray-300" : "bg-blue-500 text-white"}`} disabled={currentPage === 1} onClick={() => setCurrentPage(p => p - 1)}>Previous</button>
                                <button className={`px-3 py-1 rounded ${currentPage === totalPages ? "bg-gray-300" : "bg-blue-500 text-white"}`} disabled={currentPage === totalPages} onClick={() => setCurrentPage(p => p + 1)}>Next</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default RiderList;
